#!/usr/bin/python
# -*- coding: utf-8 -*-

import random
import math
from environment import Agent, Environment
from planner import RoutePlanner
from simulator import Simulator

class LearningAgent(Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. """

    def __init__(self, env, learning=False, epsilon=1.0, alpha=0.5):
        super(LearningAgent, self).__init__(env)     # Set the agent in the evironment
        self.planner = RoutePlanner(self.env, self)  # Create a route planner
        self.valid_actions = self.env.valid_actions  # The set of valid actions

        # Set parameters of the learning agent
        self.learning = learning # Whether the agent is expected to learn
        self.Q = dict()          # Create a Q-table which will be a dictionary of tuples
        self.epsilon = epsilon   # Random exploration factor
        self.alpha = alpha       # Learning factor

        ###########
        ## TO DO ##
        ###########
        # Set any additional class parameters as needed
        self.trial_times = 0
        random.seed(1177)


    def reset(self, destination=None, testing=False):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used
            once training trials have completed. """

        # Select the destination as the new location to route to
        self.planner.route_to(destination)

        ###########
        ## TO DO ##
        ###########
        # Update epsilon using a decay function of your choice
        # Update additional class parameters as needed
        # If 'testing' is True, set epsilon and alpha to 0
        if testing:
            self.epsilon = 0
            self.alpha = 0
        else:
            self.trial_times += 1.0  #current trial times
            # self.epsilon = self.epsilon - 0.02 if self.epsilon - 0.02 > 0 else self.epsilon #如果持续衰减探索因子到小于0,则停止衰减
            # self.epsilon = 1.0 / math.sqrt(self.trial_times)
            # self.epsilon = math.fabs(math.cos(self.alpha * self.trial_times))
            # 这里更换了探索因子衰减函数,是为了让后期训练更多的采用先前经验,而不是随机探索,同时这个函数会增多后期强化经验的训练
            #
            # times_ctl = -0.001
            self.epsilon = math.exp(-1 * self.alpha * self.trial_times)

        return None

    def build_state(self):
        """ The build_state function is called when the agent requests data from the
            environment. The next waypoint, the intersection inputs, and the deadline
            are all features available to the agent. """

        # Collect data about the environment
        waypoint = self.planner.next_waypoint() # The next waypoint
        inputs = self.env.sense(self)           # Visual input - intersection light and traffic
        deadline = self.env.get_deadline(self)  # Remaining deadline

        ###########
        ## TO DO ##
        ###########
        def state2str(s):
            if s is None:
                return "None"
            else:
                return str(s)

        # Set 'state' as a tuple of relevant data for the agent
        # state = state2str(waypoint) + '-' + state2str(inputs['light']) + '-' + state2str(inputs['left']) + '-' + state2str(inputs['oncoming'])
        state = (inputs['light'],  inputs['right'], inputs['left'], inputs['oncoming'], waypoint)

        if self.learning:
            self.Q[state] = self.Q.get(state, {None: 0.0, 'forward': 0.0, 'left': 0.0, 'right': 0.0})

        return state


    def get_maxQ(self, state):
        """ The get_max_Q function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in. """

        ###########
        ## TO DO ##
        ###########
        # Calculate the maximum Q-value of all actions for a given state

        maxQ = -999.0
        for act in self.valid_actions:
            q = self.Q[state][act]
            if q > maxQ:
                maxQ = q

        return maxQ

    def get_maxQ_action(self, state):

        action = None
        maxQ = self.get_maxQ(state)
        # shuffle valid actions before using it 避免总是选择最后一个 action 当很多 action 的 Q相同时
        # shuffled_action = random.shuffle(self.env.valid_actions)
        maxQ_actions = []

        for act in self.valid_actions:
            q = self.Q[state][act]
            if q == maxQ:
                maxQ_actions.append(act)

        return random.choice(maxQ_actions)


    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent. """

        ###########
        ## TO DO ##
        ###########
        # When learning, check if the 'state' is not in the Q-table
        # If it is not, create a new dictionary for that state
        #   Then, for each action available, set the initial Q-value to 0.0

        # actionQ = None
        # actionQ = self.Q.get(state, {})
        # if not actionQ:
        #     self.Q[state] = {}
        #     for action in self.valid_actions:
        #         self.Q[state][action] = 0.0
        if self.learning:
            self.Q[state] = self.Q.get(state, {None: 0.0, 'forward': 0.0, 'left': 0.0, 'right': 0.0})

        return


    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. """

        # Set the agent state and default action
        self.state = state
        self.next_waypoint = self.planner.next_waypoint()
        action = None

        def random_action():
            return self.env.valid_actions[random.randint(0,3)]
        ###########
        ## TO DO ##
        ###########
        # When not learning, choose a random action
        # When learning, choose a random action with 'epsilon' probability
        #   Otherwise, choose an action with the highest Q-value for the current state
        if self.learning:
            #roll the dice for getting explore probability
            explore_probability = random.random()
            #explore
            if explore_probability < self.epsilon and self.epsilon > 0.01:
                action = random.choice(self.valid_actions)#random_action()
            else:
                action = self.get_maxQ_action(state)

        else:  #test mode select action randomly . Should it get maxQ value action from Q dict for testing ?
            action = random.choice(self.valid_actions)#random_action()
            # action = self.get_maxQ_action(state)

        return action


    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives an award. This function does not consider future rewards
            when conducting learning. """

        ###########
        ## TO DO ##
        ###########
        # When learning, implement the value iteration update rule
        #   Use only the learning rate 'alpha' (do not use the discount factor 'gamma')

        # Q(state, action) = R(state, action) + gamma * Max[Q(next state, all actions]
        # R_value = 0
        if self.learning:
            self.Q[state][action] += (self.alpha * (reward - self.Q[state][action])) #R_value + reward + self.alpha * self.get_maxQ(state)

        return


    def update(self):
        """ The update function is called when a time step is completed in the
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. """

        state = self.build_state()          # Get current state
        self.createQ(state)                 # Create 'state' in Q-table
        action = self.choose_action(state)  # Choose an action
        reward = self.env.act(self, action) # Receive a reward
        self.learn(state, action, reward)   # Q-learn

        return


def run():
    """ Driving function for running the simulation.
        Press ESC to close the simulation, or [SPACE] to pause the simulation. """

    ##############
    # Create the environment
    # Flags:
    #   verbose     - set to True to display additional output from the simulation
    #   num_dummies - discrete number of dummy agents in the environment, default is 100
    #   grid_size   - discrete number of intersections (columns, rows), default is (8, 6)
    env = Environment()

    ##############
    # Create the driving agent
    # Flags:
    #   learning   - set to True to force the driving agent to use Q-learning
    #    * epsilon - continuous value for the exploration factor, default is 1
    #    * alpha   - continuous value for the learning rate, default is 0.5
    agent = env.create_agent(LearningAgent, learning=True, epsilon=1.0, alpha=0.003)

    ##############
    # Follow the driving agent
    # Flags:
    #   enforce_deadline - set to True to enforce a deadline metric
    env.set_primary_agent(agent, enforce_deadline=True)

    ##############
    # Create the simulation
    # Flags:
    #   update_delay - continuous time (in seconds) between actions, default is 2.0 seconds
    #   display      - set to False to disable the GUI if PyGame is enabled
    #   log_metrics  - set to True to log trial and simulation results to /logs
    #   optimized    - set to True to change the default log file name
    sim = Simulator(env, update_delay=0.001,log_metrics=True, optimized=True)

    ##############
    # Run the simulator
    # Flags:
    #   tolerance  - epsilon tolerance before beginning testing, default is 0.05
    #   n_test     - discrete number of testing trials to perform, default is 0
    sim.run(n_test=100, tolerance=0.002)

    pass


if __name__ == '__main__':
    run()